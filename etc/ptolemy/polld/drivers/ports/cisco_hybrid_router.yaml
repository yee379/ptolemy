---
specification: port
description: Cisco IOS Switch Layer2 Ptolemy Driver provides physical port information about the device such as port names and vlans on such ports

defaults:
    agent: SNMP
    settings:
        SNMP:
            mibs:
                - CISCO-STACK-MIB
                - CISCO-VLAN-MEMBERSHIP-MIB
                - CISCO-CDP-MIB
                - IEEE8023-LAG-MIB
                - EtherLike-MIB


mapping:
    
    updown_value: &updown_value
        - value_sub:
            dict: 
                up:      True
                down:    False
                enabled:    True
                disabled:   False
                other:   None
    ifindex_to_physical_port: &ifindex_to_physical_port
        - key_sub:
            ref:    ifName
        - function:
            key:  truncate_physical_port_name
    ifindex_to_physical_port_with_updown: &ifindex_to_physical_port_with_updown
        - *ifindex_to_physical_port
        - *updown_value
    port_index_to_physical_port: &port_index_to_physical_port
        # first map to ifindex, then use that to get the physical port
        - key_sub:
            ref: portIfIndex
        - key_sub:
            ref: ifName
    dot3status_duplex: &dot3status_duplex
        - *ifindex_to_physical_port
        - value_sub:
            dict:
                fullDuplex: 'full'
                halfDuplex: 'half'
                unknown:      'unknown'
    port_speed: &port_speed
        - *port_index_to_physical_port
        - value_sub:
            dict:
                '10':       '10'
                '100':      '100'
                '1000':     '1000'
                '10000':    '10000'
                s10000000:  '10'
                s100000000: '100'
                s1000000000: '1000'
                autoDetect: 'auto'
                autoDetect10100: 'auto'
                # other:      'unknown'
    decode_vlan: &decode_vlan
        - function:
            value:   decode_vlanVlansOnPort
        - *ifindex_to_physical_port


definition:

    status:
        
        group_by_key:   True
        key_name:       physical_port

        defs:
            - alias:
                ref:    ifAlias
                map:    *ifindex_to_physical_port
            - description:
                ref:    ifDescr
                map:    *ifindex_to_physical_port
            - type:
                ref:    ifType
                map:    *ifindex_to_physical_port

            - physical:
                ref:    ifType
                map:
                    - *ifindex_to_physical_port
                    - value_sub:
                        dict:
                            e.*:  True
                            ieee80211:  True
                            other:  False
            - mac_address:
                ref:    ifPhysAddress
                map:    
                    - *ifindex_to_physical_port
                    - function:
                        value:   normalise_mac_address
            - admin_status:
                ref:    ifAdminStatus
                map:    *ifindex_to_physical_port_with_updown
            - op_status:
                ref:    ifOperStatus
                map:    *ifindex_to_physical_port_with_updown
            
            # - duplex_admin_status:
            #     ref:    portDuplex
            #     map:    *port_index_to_physical_port
                
            - duplex_status:
                ref:    dot3StatsDuplexStatus
                map:    *dot3status_duplex
            
            # - speed_admin_status:
            #     ref:    portAdminSpeed
            #     map:    *port_speed
            - speed:
                ref:    ifHighSpeed
                map:    *ifindex_to_physical_port
            
            - portfast:
                required: False
            #     
            # - native_vlan:
            #     ref:    vmVlan
            #     map:
            #         - *ifindex_to_physical_port
            - trunked_vlans:
                map:
                    - function:
                        group: extract_l2vlan_trunking_vlans


            # determine if access or trunk
            - function:
                map:
                    - function:
                        group:  determine_port_function

...