---
specification:  spanning_tree
description:    Generic cisco cam table and spanning tree querier Ptolemy Driver

defaults:
    agent: SNMP
    settings:
        SNMP:
            mibs:
                - Q-BRIDGE-MIB
                - CISCO-VTP-MIB


definition:

    meta:
        key_name:     vlan
        group_by_key:   True

        defaults:
            map:
                # convert the key to the vlan number
                - regexp:
                    key: ^\d+\.(?P<key>\d+)$
        defs:
            - state:
                ref:  vtpVlanState
            - name:
                ref:    vtpVlanName
    interfaces:
        clean:  True
        defs:
            - ifName:
                ref:    ifName                        


# special control to use the returned array of values to change the snmp community string so that
# we may query for each vlan for the cam tables
iterative_definition:

    # must iterate over each vlan configured on the switch....    
    __with__:
        defs:
            - vlan:
                ref:    meta::vlan
                map:
                    - filter:
                        key:
                            1002:   False
                            1003:   False
                            1004:   False
                            1005:   False
                            other:  True
                    - to_array:
                        using:  keys
    
    neighbour:
        
        group_by_key: True
        key_name:     mac_address
        additional_key_names:
            - mac_address
            - vlan
            - physical_port
        
        defaults:
            required:   False
            map:    &binary_to_mac_address
                - function:
                    key:    integers_to_hex
                - function:
                    key:    pretty_print_mac_address
        
        defs:
    
            - physical_port:
                ref:    dot1dTpFdbPort
                map:
                    - value_sub:
                        ref:    dot1dBasePortIfIndex
                    - value_sub:
                        parent_ref:    interfaces::ifName
                    - function:
                        value:   truncate_physical_port_name
                    - *binary_to_mac_address
            - status:
                ref:    dot1dTpFdbStatus
                
    status:
        
        group_by_key:   True
        additional_key_names:
            - vlan
        remove_key: True
        defs:
    
            - designated_root:
                ref:    dot1dStpDesignatedRoot
                map:
                    - function:
                        value:  binary_to_hex
                    - regexp:
                        value:  ^\w+\.\w+\.(?P<value>.*)$
                    - function:
                        value:  pretty_print_mac_address
            - root_physical_port:
                ref:    dot1dStpRootPort
                map:
                    - value_sub:
                        ref:    dot1dBasePortIfIndex
                    - value_sub:
                        parent_ref:    interfaces::ifName
            - bridge_priority:
                ref:    dot1dStpPriority
            - root_cost:
                ref:    dot1dStpRootCost
    
    port:
    
        group_by_key:   True
        key_name:     physical_port
    
        defaults:
            map: &dot1d_index_to_physical
                - key_sub:
                    ref:    dot1dBasePortIfIndex
                - key_sub:
                    ref:    ifName
    
        defs:
            
            - state:
                ref:    dot1dStpPortState
            - bridge:
                ref:    dot1dStpPortDesignatedBridge
                map:
                    - function:
                        value:  binary_to_hex
                    - regexp:
                        value:  ^\w+\.\w+\.(?P<value>.*)$
                    - function:
                        value:  pretty_print_mac_address
                    - *dot1d_index_to_physical        
            - root:
                ref:    dot1dStpPortDesignatedRoot               
                map:
                    - function:
                        value:  binary_to_hex
                    - regexp:
                        value:  ^\w+\.\w+\.(?P<value>.*)$
                    - function:
                        value:  pretty_print_mac_address
                    - *dot1d_index_to_physical    
            - priority:
                ref:    dot1dStpPortPriority
            # FXIME!
            - enabled:
                ref:    dot1dStpPortEnable
            - path_cost:
                ref:    dot1dStpPortPathCost
            # - transitions:
            #     ref:    dot1dStpPortForwardTransitions
